pred1[1:5]
error1 <- mean(testing1$default != pred1)
error
error1 <- mean(testing1$default != pred1)
error1
set.seed(0786234)
rows2 <- sample(x = nrow(df_default), size = floor(0.8*nrow(df_default)), replace = FALSE)
training2 <- df_default[rows2, ]
testing2 <- df_default[-rows2, ]
model3 <- glm(default~income + balance, family = "binomial", data = training2)
pred2 <- factor(ifelse(predict(model3, newdata = testing2, type = "response") > 0.5, "Yes", "No"))
error2 <- mean(testing2$default != pred2)
error2
set.seed(143670)
rows3 <- sample(x = nrow(df_default), size = floor(0.8*nrow(df_default)), replace = FALSE)
training3 <- df_default[rows3, ]
testing3 <- df_default[-rows3, ]
model4 <- glm(default~income + balance, family = "binomial", data = training3)
pred3 <- factor(ifelse(predict(model4, newdata = testing3, type = "response") > 0.5, "Yes", "No"))
error3 <- mean(testing3$default != pred3)
error3
set.seed(62475)
rows4 <- sample(x = nrow(df_default), size = floor(0.8*nrow(df_default)), replace = FALSE)
training4 <- df_default[rows4, ]
testing4 <- df_default[-rows4, ]
model5 <- glm(default~income + balance, family = "binomial", data = training4)
pred4 <- factor(ifelse(predict(model5, newdata = testing4, type = "response") > 0.5, "Yes", "No"))
error4 <- mean(testing4$default != pred4)
error4
View(df_default)
model3 <- glm(default~income + balance + student, data = df_default, family = "binomial")
set.seed(0786234)
rows2 <- sample(x = nrow(df_default), size = floor(0.8*nrow(df_default)), replace = FALSE)
training2 <- df_default[rows2, ]
testing2 <- df_default[-rows2, ]
model3 <- glm(default~income + balance, family = "binomial", data = training2)
pred2 <- factor(ifelse(predict(model3, newdata = testing2, type = "response") > 0.5, "Yes", "No"))
error2 <- mean(testing2$default != pred2)
error2
set.seed(765)
rows5 <- sample(x = nrow(df_default), size = floor(0.8*nrow(df_default)), replace = FALSE)
training5 <- df_default[rows5, ]
testing5 <- df_default[-rows5, ]
model6 <- glm(default~income + balance + student, family = "binomial", data = training6)
set.seed(765)
rows5 <- sample(x = nrow(df_default), size = floor(0.8*nrow(df_default)), replace = FALSE)
training5 <- df_default[rows5, ]
testing5 <- df_default[-rows5, ]
model6 <- glm(default~income + balance + student, family = "binomial", data = training5)
set.seed(765)
rows5 <- sample(x = nrow(df_default), size = floor(0.8*nrow(df_default)), replace = FALSE)
training5 <- df_default[rows5, ]
testing5 <- df_default[-rows5, ]
model6 <- glm(default~income + balance + student, family = "binomial", data = training5)
pred5 <- factor(ifelse(predict(model6, newdata = testing5, type = "response") > 0.5, "Yes", "No"))
error5 <- mean(testing5$default != pred5)
error5
baseline <- mean(df_default$default)
baseline
set.seed(765)
rows5 <- sample(x = nrow(df_default), size = floor(0.8*nrow(df_default)), replace = FALSE)
training5 <- df_default[rows5, ]
testing5 <- df_default[-rows5, ]
model6 <- glm(default~income + balance + student, family = "binomial", data = training5)
summary(model6)
pred5 <- factor(ifelse(predict(model6, newdata = testing5, type = "response") > 0.5, "Yes", "No"))
error5 <- mean(testing5$default != pred5)
error5
summary(model1)
summary(model2)
df_weekly <- Weekly
model7 <- glm(Direction~Lag1 + Lag2, data = df_weekly, family = "binomial")
df_weekly2 <- df_weekly[-1,]
View(df_weekly2)
View(df_weekly)
df_weekly2 <- df_weekly[-1,]
model8 <- glm(Direction~Lag1 + Lag2, data = df_weekly2, family = "binomial")
pred6 <- factor(ifelse(predict(model8, newdata = df_weekly[1, ], type = "response") > 0.5, "Up", "Down"))
error6 <- mean(df_weekly[1, ]$Direction != pred6)
error6
pred6
df_weekly[1, ]
pred6 <- factor(ifelse(predict(model8, newdata = df_weekly[1, ], type = "response") > 0.5, "Up", "Down"))
error6 <- mean(df_weekly[1, ]$Direction == pred6)
error6
pred6 <- factor(ifelse(predict(model8, newdata = df_weekly[1, ], type = "response") > 0.5, "Up", "Down"))
error6 <- mean(df_weekly[1, ]$Direction != pred6)
error6
pred6 <- factor(ifelse(predict(model8, newdata = df_weekly[1, ], type = "response") > 0.5, "Up", "Down"))
print(pred6, df_weekly[1, ])
pred6 <- factor(ifelse(predict(model8, newdata = df_weekly[1, ], type = "response") > 0.5, "Up", "Down"))
(pred6, df_weekly[1, ])
pred6 <- factor(ifelse(predict(model8, newdata = df_weekly[1, ], type = "response") > 0.5, "Up", "Down"))
pred6
df_weekly[1, ]
pred6 <- factor(ifelse(predict(model8, newdata = df_weekly[1, ], type = "response") > 0.5, "Up", "Down"))
pred6
df_weekly[1, ]$Direction
pred6 <- factor(ifelse(predict(model8, newdata = df_weekly[1, ], type = "response") > 0.5, "Up", "Down"))
pred6
df_weekly[1, ]$Direction
pred6 <- factor(ifelse(predict(model8, newdata = df_weekly[1, ], type = "response") > 0.5, "Up", "Down"))
pred6
# df_weekly[1, ]$Direction
pred6 <- factor(ifelse(predict(model8, newdata = df_weekly[1, ], type = "response") > 0.5, "Up", "Down"))
print("Prediction")
pred6
print("Actual")
df_weekly[1, ]$Direction
pred6 <- factor(ifelse(predict(model8, newdata = df_weekly[1, ], type = "response") > 0.5, "Up", "Down"))
print("Prediction")
pred6
print("")
print("Actual")
df_weekly[1, ]$Direction
pred6 <- factor(ifelse(predict(model8, newdata = df_weekly[1, ], type = "response") > 0.5, "Up", "Down"))
print("Prediction")
pred6
print( )
pred6 <- factor(ifelse(predict(model8, newdata = df_weekly[1, ], type = "response") > 0.5, "Up", "Down"))
print(Prediction)
pred6 <- factor(ifelse(predict(model8, newdata = df_weekly[1, ], type = "response") > 0.5, "Up", "Down"))
print("Prediction")
pred6
print(" ")
print("Actual")
df_weekly[1, ]$Direction
pred6 <- factor(ifelse(predict(model8, newdata = df_weekly[1, ], type = "response") > 0.5, "Up", "Down"))
print("Prediction")
pred6
print("Actual")
df_weekly[1, ]$Direction
pred6 <- factor(ifelse(predict(model8, newdata = df_weekly[1, ], type = "response") > 0.5, "Up", "Down"))
print("Prediction")
pred6
print("Actual")
as.character(df_weekly[1, ]$Direction)
pred6 <- factor(ifelse(predict(model8, newdata = df_weekly[1, ], type = "response") > 0.5, "Up", "Down"))
print("Prediction")
as.character(pred6)
print("Actual")
as.character(df_weekly[1, ]$Direction)
pred6 <- factor(ifelse(predict(model8, newdata = df_weekly[1, ], type = "response") > 0.5, "Up", "Down"))
print("Prediction") as.character(pred6)
pred6 <- factor(ifelse(predict(model8, newdata = df_weekly[1, ], type = "response") > 0.5, "Up", "Down"))
print("Prediction", as.character(pred6))
pred6 <- factor(ifelse(predict(model8, newdata = df_weekly[1, ], type = "response") > 0.5, "Up", "Down"))
print("Prediction:")
as.character(pred6)
print("Actual:")
as.character(df_weekly[1, ]$Direction)
num_r <- length(df_weekly$Direction)
num_r
num_r <- length(df_weekly$Direction)
errors <- c()
for (i in 1:num_r)
{
model9 <- glm(Direction~Lag1 + Lag2, data = df_weekly[-i, ], family = "binomial")
pred7 <- factor(ifelse(predict(model9, newdata = df_weekly[i, ], type = "response") > 0.5, "Up", "Down"))
errors[i] <- as.numeric(pred7 != df_weekly[i, ]$Direction)
}
num_r <- length(df_weekly$Direction)
errors <- c()
for (i in 1:num_r)
{
model9 <- glm(Direction~Lag1 + Lag2, data = df_weekly[-i, ], family = "binomial")
pred7 <- factor(ifelse(predict(model9, newdata = df_weekly[i, ], type = "response") > 0.5, "Up", "Down"))
errors[i] <- as.numeric(pred7 != df_weekly[i, ]$Direction)
}
errors
error7 <- mean(errors != df_weekly$Direction)
error7
error7 <- mean(errors)
error7
set.seed(1)
x <- rnorm(100)
y <- x - 2 * x^2 + rnorm(100)
plot(x, y)
plot(x, y, pty = "s")
plot(x, y)
par(pty = "s")
plot(x, y)
model10 <- glm(y~x)
set.seed(123)
df <- data.frame(x, y)
for (i in 1:100)
{
model10 <- glm(y~x, data = df, family = "binomial")
loocv <- cv.glm(df, model10)
mse <- loocv$delta[1]
}
set.seed(123)
df <- data.frame(x, y)
for (i in 1:100)
{
model10 <- glm(y~x, data = df)
loocv <- cv.glm(df, model10)
mse <- loocv$delta[1]
}
mse
set.seed(123)
df <- data.frame(x, y)
for (i in 1:100)
{
model10 <- glm(y~x^2, data = df)
loocv <- cv.glm(df, model10)
mse <- loocv$delta[1]
}
mse
set.seed(123)
df <- data.frame(x, y)
for (i in 1:100)
{
model10 <- glm(y~x, data = df)
loocv1 <- cv.glm(df, model10)
mse1 <- loocv2$delta[1]
}
set.seed(123)
df <- data.frame(x, y)
for (i in 1:100)
{
model10 <- glm(y~x, data = df)
loocv1 <- cv.glm(df, model10)
mse1 <- loocv1$delta[1]
}
mse1
set.seed(123)
for (i in 1:100)
{
model11 <- glm(y~x^2, data = df)
loocv2 <- cv.glm(df, model11)
mse2 <- loocv2$delta[1]
}
mse2
set.seed(123)
for (i in 1:100)
{
model11 <- glm(y~x^2, data = df)
loocv2 <- cv.glm(data = df, glmfit = model11, k = nrow(df))
mse2 <- loocv2$delta[1]
}
set.seed(123)
for (i in 1:100)
{
model11 <- glm(y~x^2, data = df)
loocv2 <- cv.glm(data = df, glmfit = model11, K = nrow(df))
mse2 <- loocv2$delta[1]
}
mse2
set.seed(123)
model11 <- glm(y~x^2, data = df)
loocv2 <- cv.glm(data = df, glmfit = model11, K = nrow(df))
mse2 <- loocv2$delta[1]
mse2
set.seed(123)
df <- data.frame(x, y)
model10 <- glm(y~x, data = df)
loocv1 <- cv.glm(data = df, glmfit = model10, K = nrow(df))
mse1 <- loocv1$delta[1]
mse1
set.seed(102)
model11 <- glm(y~x^2, data = df)
loocv2 <- cv.glm(data = df, glmfit = model11, K = nrow(df))
mse2 <- loocv2$delta[1]
mse2
set.seed(123)
model12 <- glm(y~x + x^2, data = df)
loocv3<- cv.glm(data = df, glmfit = model12, K = nrow(df))
mse3 <- loocv3$delta[1]
mse3
sqrt(mse3)
set.seed(123)
model12 <- glm(y~x + x^2, data = df)
loocv3<- cv.glm(data = df, glmfit = model12, K = nrow(df))
mse3 <- loocv3$delta[1]
sqrt(mse3)
set.seed(123)
model11 <- glm(y~I(x^2), data = df)
loocv2 <- cv.glm(data = df, glmfit = model11, K = nrow(df))
mse2 <- loocv2$delta[1]
mse2
I(x^2)
set.seed(123)
model11 <- glm(y~x^2, data = df)
loocv2 <- cv.glm(data = df, glmfit = model11, K = nrow(df))
mse2 <- loocv2$delta[1]
mse2
summary(model11)
summary(model12)
View(df)
summary(model10)
set.seed(123)
model11 <- glm(y~x + x^2, data = df)
loocv2 <- cv.glm(data = df, glmfit = model11, K = nrow(df))
mse2 <- loocv2$delta[1]
mse2
set.seed(123)
df <- data.frame(x, y)
model10 <- glm(y~x, data = df)
loocv1 <- cv.glm(data = df, glmfit = model10, K = nrow(df))
mse1 <- loocv1$delta[1]
mse1
set.seed(123)
model12 <- glm(y~x + x^2 + x^3, data = df)
loocv3<- cv.glm(data = df, glmfit = model12, K = nrow(df))
mse3 <- loocv3$delta[1]
mse3
model12
summary(model12)
set.seed(123)
model12 <- glm(y~I(x) + I(x^2) + I(x^3), data = df)
loocv3<- cv.glm(data = df, glmfit = model12, K = nrow(df))
mse3 <- loocv3$delta[1]
mse3
set.seed(123)
model11 <- glm(y~I(x) + I(x^2), data = df)
loocv2 <- cv.glm(data = df, glmfit = model11, K = nrow(df))
mse2 <- loocv2$delta[1]
mse2
set.seed(123)
df <- data.frame(x, y)
model10 <- glm(y~I(x), data = df)
loocv1 <- cv.glm(data = df, glmfit = model10, K = nrow(df))
mse1 <- loocv1$delta[1]
mse1
set.seed(123)
model13 <- glm(y~I(x) + I(x^2) + I(x^3) + I(x^4), data = df)
loocv4 <- cv.glm(data = df, glmfit = model13, K = nrow(df))
mse4 <- loocv4$delta[1]
mse4
set.seed(3154978)
df <- data.frame(x, y)
model10 <- glm(y~I(x), data = df)
loocv1 <- cv.glm(data = df, glmfit = model10, K = nrow(df))
mse1 <- loocv1$delta[1]
mse1
set.seed(3154978)
model11 <- glm(y~I(x) + I(x^2), data = df)
loocv2 <- cv.glm(data = df, glmfit = model11, K = nrow(df))
mse2 <- loocv2$delta[1]
mse2
set.seed(3154978)
model12 <- glm(y~I(x) + I(x^2) + I(x^3), data = df)
loocv3<- cv.glm(data = df, glmfit = model12, K = nrow(df))
mse3 <- loocv3$delta[1]
mse3
set.seed(3154978)
model13 <- glm(y~I(x) + I(x^2) + I(x^3) + I(x^4), data = df)
loocv4 <- cv.glm(data = df, glmfit = model13, K = nrow(df))
mse4 <- loocv4$delta[1]
mse4
set.seed(23578)
model13 <- glm(y~I(x) + I(x^2) + I(x^3) + I(x^4), data = df)
loocv4 <- cv.glm(data = df, glmfit = model13, K = nrow(df))
mse4 <- loocv4$delta[1]
mse4
loocv4$delta[0]
summary(model10)
summary(model11)
summary(model12)
summary(model13)
coefficients(model10)
coefficients(model11)
coefficients(model12)
coefficients(model13)
summary(model10)
summary(model11)
summary(model12)
summary(model13)
one <- read.csv("1000-MTV-Music-Artists-page-1.csv")
one <- read.csv("10000-MTV-Music-Artists-page-1.csv")
one <- read_csv("10000-MTV-Music-Artists-page-1.csv")
library(tidyverse)
one <- read_csv("10000-MTV-Music-Artists-page-1.csv")
one <- read_csv("10000-MTV-Music-Artists-page-1.csv")
two <- read_csv("10000-MTV-Music-Artists-page-2.csv")
cd
ls
one <- read.csv("10000-MTV-Music-Artists-page-1.csv")
one <- read_csv("10000-MTV-Music-Artists-page-1.csv")
two <- read_csv("10000-MTV-Music-Artists-page-2.csv")
three <- read_csv("10000-MTV-Music-Artists-page-3.csv")
four <- read_csv("10000-MTV-Music-Artists-page-4.csv")
getwd()
setwd("C:/Users/maede/Downloads/R/STAT3400/Project")
setwd("C:\Users\maede\Downloads\R\STAT3400\Project")
setwd("C:/Users/maede/Downloads/R/STAT3400/Project")
setwd("C:/Users/maede/Downloads/R/STAT 3400/Project")
getwd()
one <- read_csv("10000-MTV-Music-Artists-page-1.csv")
two <- read_csv("10000-MTV-Music-Artists-page-2.csv")
three <- read_csv("10000-MTV-Music-Artists-page-3.csv")
four <- read_csv("10000-MTV-Music-Artists-page-4.csv")
all_artist data.frame(one, two, three, four)
df_list <- list(one, two, three, four)
library(tidyverse)
one <- read_csv("10000-MTV-Music-Artists-page-1.csv")
two <- read_csv("10000-MTV-Music-Artists-page-2.csv")
three <- read_csv("10000-MTV-Music-Artists-page-3.csv")
four <- read_csv("10000-MTV-Music-Artists-page-4.csv")
df_list <- list(one, two, three, four)
View(df_list)
all_artists <- df_list %>% reduce(full_join, by = 'variable_name')
glimpse(one)
View(one)
df_list <- c(one$name, two$name, three$name, four$name)
view(df_list)
all_artists <- data.frame(c(one$name, two$name, three$name, four$name))
rows <- sample(x = nrow(all_artists), size = 100, replace = FALSE)
set.seed(100)
rows <- sample(x = nrow(all_artists), size = 100, replace = FALSE)
rand100 <- all_artist[rows, ]
rand100 <- all_artists[rows, ]
library(tidyverse)
one <- read_csv("10000-MTV-Music-Artists-page-1.csv")
two <- read_csv("10000-MTV-Music-Artists-page-2.csv")
three <- read_csv("10000-MTV-Music-Artists-page-3.csv")
four <- read_csv("10000-MTV-Music-Artists-page-4.csv")
all_artists <- data.frame(c(one$name, two$name, three$name, four$name))
set.seed(100)
rows <- sample(x = nrow(all_artists), size = 100, replace = FALSE)
rand100 <- all_artists[rows, ]
library(knitr)
library(tinytex)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(out.width = "60%")
# Create a list of all artist names
all_artists <- data.frame(c(one, two, three, four))
one %>% filter(one$genre == "Pop")
View(one)
# Read in csv files
one <- read_csv("10000-MTV-Music-Artists-page-1.csv")
pop1 <- one %>% filter(one$genre == "Pop")
View(pop1)
pop1 <- one %>% filter(one$genre == "Pop" | one$genre == "Country")
one %>% filter(one$genre == "Pop" | one$genre == "Country")
pop_country_two <- two %>% filter(two$genre == "Pop" | two$genre == "Country")
pop_country_three <- three %>% filter(three$genre == "Pop" | three$genre == "Country")
pop_country_four <- four %>% filter(four$genre == "Pop" | four$genre == "Country")
# Create a list of all artist names
all_artists <- data.frame(c(pop_country_one$name, pop_country_two$name, pop_country_three$name, pop_country_four$name))
# Filter only Pop and Country artists
pop_country_one <- one %>% filter(one$genre == "Pop" | one$genre == "Country")
# Create a list of all artist names
all_artists <- data.frame(c(pop_country_one$name, pop_country_two$name, pop_country_three$name, pop_country_four$name))
# Set seed
set.seed(100)
# Randomly select 100 artist
rows <- sample(x = nrow(all_artists), size = 100, replace = FALSE)
# Select the rows the all_artist dataframe with randomly selected 100 artist
rand100 <- all_artists[rows, ]
library(knitr)
library(tinytex)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(out.width = "60%",fig.align='center')
#load libraries
library(tidyverse)
#import and wrangle data
bball <- read_csv("basketball.csv") %>%
select(-season,-game_id,-team)
#review data structure
glimpse(bball)
#load libraries
library(leaps)
#execute forward selection
best_forward <- regsubsets(MOV~.,data=bball,method="forward")
#review results
summary(best_forward)
#execute backward selection
best_backward <- regsubsets(MOV~.,data=bball,method="backward")
#review results
summary(best_backward)
#load libraries
library(boot)
#fit model
model_cv <- glm(MOV~X3PP,data=bball,family="gaussian")
#set randomization seed
set.seed(1)
#execute 5-fold CV algorithm
ten_cv <- cv.glm(data=bball,glmfit=model_cv,K=10)
#extract average error
sqrt(ten_cv$delta[1])
which(model_cv)
which(best_backward)
best_backward$method
best_backward$call
best_backward$np
best_backward$rss
best_backward$ress
best_backward$nbest
best_backward$xnames
best_backward$lopt
best_backward$sserr
best_backward$nn
best_backward
coef(backwar)
coefficients(best_backward)
coef(best_backward)
coef(best_backward, 3)
coef(best_backward, 0)
coef(best_backward, 1)
ncol(bbal)
ncol(bball)
View(bball)
best_backward, 1
vcov(best_backward, 1)
type(coef(best_backward, 1))
typeof(coef(best_backward, 1))
